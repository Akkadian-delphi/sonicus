"""
Test for the Simple Enhanced Authentication Router
"""

import pytest
from fastapi.testclient import TestClient
from unittest.mock import Mock, patch
from sqlalchemy.orm import Session

from run import app
from app.models.user import User, UserRole

@pytest.fixture
def client():
    """Create test client"""
    return TestClient(app)

@pytest.fixture 
def mock_user():
    """Create a mock user for testing"""
    user = Mock(spec=User)
    user.id = 1
    user.email = "test@example.com"
    user.role = UserRole.USER
    user.organization_id = None
    user.is_active = True
    return user

def test_simple_enhanced_auth_router_import():
    """Test that the simple enhanced auth router is properly imported and accessible"""
    # Check that the router is available in the application
    routes = [getattr(route, 'path', str(route)) for route in app.routes]
    
    # The auth endpoints should be available under the /api/v1/auth prefix
    expected_paths = [
        "/api/v1/auth/enhanced-login",
        "/api/v1/auth/user-info", 
        "/api/v1/auth/logout"
    ]
    
    # Check if auth-related routes exist (they may be in the OpenAPI routes)
    assert any("/auth/" in path for path in routes), f"No auth routes found in: {routes}"

@patch('app.routers.simple_enhanced_auth.get_db')
@patch('app.routers.simple_enhanced_auth.SessionAuditService.log_authentication_event')
def test_enhanced_login_endpoint_structure(mock_audit, mock_db, client, mock_user):
    """Test the enhanced login endpoint structure without full authentication"""
    
    # Mock database session
    mock_session = Mock(spec=Session)
    mock_db.return_value = mock_session
    
    # Mock the user query to return our mock user
    mock_session.query.return_value.filter.return_value.first.return_value = mock_user
    
    # Mock the audit service to avoid Redis calls
    mock_audit.return_value = None
    
    with patch('app.routers.simple_enhanced_auth.EnhancedJWTManager') as mock_jwt_manager:
        mock_jwt_instance = Mock()
        mock_jwt_instance.create_access_token.return_value = "test_token"
        mock_jwt_manager.return_value = mock_jwt_instance
        
        # Test the login endpoint
        response = client.post(
            "/api/v1/auth/enhanced-login",
            data={"username": "test@example.com", "password": "password"}
        )
        
        # Should return 200 or handle the request properly
        assert response.status_code in [200, 422, 500], f"Unexpected status code: {response.status_code}"
        
        # If successful, should have token structure
        if response.status_code == 200:
            data = response.json()
            assert "access_token" in data
            assert "token_type" in data
            assert "user_id" in data
            assert "role" in data

def test_router_availability():
    """Test that the simple enhanced auth router endpoints are available"""
    # This test just verifies the router is properly imported and accessible
    from app.routers import simple_enhanced_auth
    
    assert hasattr(simple_enhanced_auth, 'router')
    assert simple_enhanced_auth.router is not None
    
    # Check that required endpoints exist
    route_paths = [getattr(route, 'path', str(route)) for route in simple_enhanced_auth.router.routes]
    expected_endpoints = ["/enhanced-login", "/user-info", "/logout"]
    
    for endpoint in expected_endpoints:
        assert endpoint in route_paths, f"Missing endpoint: {endpoint}"

if __name__ == "__main__":
    # Run basic tests
    test_router_availability()
    print("âœ… Simple Enhanced Auth Router tests passed!")
